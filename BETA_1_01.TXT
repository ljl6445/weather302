#include <Wire.h>
#include <dht11.h>
 #include <stdio.h>;  
 #include <math.h>  
 int i;
  int len; 
  int times;
  int temp;


dht11 DHT11;
#define DHT11PIN 22
#define BMP085_ADDRESS 0x77  // I2C address of BMP085
const unsigned char OSS = 0;  // Oversampling Setting

byte buff[2];


//data of  weather station
float temperature;
float pressure;
uint16_t lx=0;
float humidity;



// Calibration values
int ac1;
int ac2; 
int ac3; 
unsigned int ac4;
unsigned int ac5;
unsigned int ac6;
int b1; 
int b2;
int mb;
int mc;
int md;

// b5 is calculated in bmp085GetTemperature(...), this variable is also used in bmp085GetPressure(...)
// so ...Temperature(...) must be called before ...Pressure(...).
long b5; 

String inputString = "";         // 用于保存输入数据的字符串
boolean stringComplete = false;  // 字符串是否已接收完全


void setup()
{
  Serial.begin(9600);
  Serial2.begin(115200);
  Serial3.begin(9600);
   Wire.begin();
  bmp085Calibration(); 
  pinMode(1,INPUT);
  
}
int t;

void loop()
{
 seneor_work();//function in the sensor.ino

 

 post_temperature();
 post_press();
 post_humidity();

 

 for(t=0;t<=180;t++)
  {
    delay(1000); 
  }
  
}



void seneor_work()
{
     temperature = (float)bmp085GetTemperature(bmp085ReadUT())/10;
  pressure =(float)bmp085GetPressure(bmp085ReadUP())/100;
  Serial.print("Temperature: ");
  Serial.print(temperature, 1);
  Serial.println("  deg C");
  Serial.print("Pressure: ");
  Serial.print(pressure,1);
  Serial.println(" hPa");
  delay(1000);
 ////////// 
 
 
 //////
  int chk = DHT11.read(DHT11PIN); 
  Serial.print("Humidity (%): ");
  humidity=(float)DHT11.humidity;
  Serial.println(humidity, 0);
  delay(1000);
  ///////////////
  
}
 


///////////////////////////////////////////////
// Stores all of the bmp085's calibration values into global variables
// Calibration values are required to calculate temp and pressure
// This function should be called at the beginning of the program
void bmp085Calibration()
{
  ac1 = bmp085ReadInt(0xAA);
  ac2 = bmp085ReadInt(0xAC);
  ac3 = bmp085ReadInt(0xAE);
  ac4 = bmp085ReadInt(0xB0);
  ac5 = bmp085ReadInt(0xB2);
  ac6 = bmp085ReadInt(0xB4);
  b1 = bmp085ReadInt(0xB6);
  b2 = bmp085ReadInt(0xB8);
  mb = bmp085ReadInt(0xBA);
  mc = bmp085ReadInt(0xBC);
  md = bmp085ReadInt(0xBE);
}
// Calculate temperature given ut.
// Value returned will be in units of 0.1 deg C
short bmp085GetTemperature(unsigned int ut)
{
  long x1, x2;
  
  x1 = (((long)ut - (long)ac6)*(long)ac5) >> 15;
  x2 = ((long)mc << 11)/(x1 + md);
  b5 = x1 + x2;
  return ((b5 + 8)>>4);  
}

// Calculate pressure given up
// calibration values must be known
// b5 is also required so bmp085GetTemperature(...) must be called first.
// Value returned will be pressure in units of Pa.
long bmp085GetPressure(unsigned long up)
{
  long x1, x2, x3, b3, b6, p;
  unsigned long b4, b7;
  
  b6 = b5 - 4000;
  // Calculate B3
  x1 = (b2 * (b6 * b6)>>12)>>11;
  x2 = (ac2 * b6)>>11;
  x3 = x1 + x2;
  b3 = (((((long)ac1)*4 + x3)<<OSS) + 2)>>2;
  
  // Calculate B4
  x1 = (ac3 * b6)>>13;
  x2 = (b1 * ((b6 * b6)>>12))>>16;
  x3 = ((x1 + x2) + 2)>>2;
  b4 = (ac4 * (unsigned long)(x3 + 32768))>>15;
  
  b7 = ((unsigned long)(up - b3) * (50000>>OSS));
  if (b7 < 0x80000000)
    p = (b7<<1)/b4;
  else
    p = (b7/b4)<<1;
    
  x1 = (p>>8) * (p>>8);
  x1 = (x1 * 3038)>>16;
  x2 = (-7357 * p)>>16;
  p += (x1 + x2 + 3791)>>4;
  
  return p;
}

// Read 1 byte from the BMP085 at 'address'
char bmp085Read(unsigned char address)
{
  unsigned char data;
  
  Wire.beginTransmission(BMP085_ADDRESS);
  Wire.write(address);
  Wire.endTransmission();
  
  Wire.requestFrom(BMP085_ADDRESS, 1);
  while(!Wire.available())
    ;
    
  return Wire.read();
}

// Read 2 bytes from the BMP085
// First byte will be from 'address'
// Second byte will be from 'address'+1
int bmp085ReadInt(unsigned char address)
{
  unsigned char msb, lsb;
  
  Wire.beginTransmission(BMP085_ADDRESS);
  Wire.write(address);
  Wire.endTransmission();
  
  Wire.requestFrom(BMP085_ADDRESS, 2);
  while(Wire.available()<2)
    ;
  msb = Wire.read();
  lsb = Wire.read();
  
  return (int) msb<<8 | lsb;
}

// Read the uncompensated temperature value
unsigned int bmp085ReadUT()
{
  unsigned int ut;
  
  // Write 0x2E into Register 0xF4
  // This requests a temperature reading
  Wire.beginTransmission(BMP085_ADDRESS);
  Wire.write(0xF4);
  Wire.write(0x2E);
  Wire.endTransmission();
  
  // Wait at least 4.5ms
  delay(5);
  
  // Read two bytes from registers 0xF6 and 0xF7
  ut = bmp085ReadInt(0xF6);
  return ut;
}

// Read the uncompensated pressure value
unsigned long bmp085ReadUP()
{
  unsigned char msb, lsb, xlsb;
  unsigned long up = 0;
  
  // Write 0x34+(OSS<<6) into register 0xF4
  // Request a pressure reading w/ oversampling setting
  Wire.beginTransmission(BMP085_ADDRESS);
  Wire.write(0xF4);
  Wire.write(0x34 + (OSS<<6));
  Wire.endTransmission();
  // Wait for conversion, delay time dependent on OSS
  delay(2 + (3<<OSS));
  // Read register 0xF6 (MSB), 0xF7 (LSB), and 0xF8 (XLSB)
  Wire.beginTransmission(BMP085_ADDRESS);
  Wire.write(0xF6);
  Wire.endTransmission();
  Wire.requestFrom(BMP085_ADDRESS, 3);
  // Wait for data to become available
  while(Wire.available() < 3)   ;
  msb = Wire.read();
  lsb = Wire.read();
  xlsb = Wire.read(); 
  up = (((unsigned long) msb << 16) | ((unsigned long) lsb << 8) | (unsigned long) xlsb) >> (8-OSS);
  return up;
}

char post[]={//提交数据包
    "POST /v1.0/device/15248/sensor/aaaaa/datapoints HTTP/1.1\r\n"
    "Host: api.yeelink.net\r\n"
    "Accept: */*\r\n"
    "U-ApiKey: b97ac84fe6527bde9ecc20f251552faa\r\n"
    "Content-Length: dt\r\n"
    "Content-Type: application/x-www-form-urlencoded\r\n"
    "Connection: close\r\n"
    "\r\n"
    "{\"value\":xxxxxx}\r\n"
       };//xx用来填充数值

    char post_reserve[]={//提交数据包
    "POST /v1.0/device/15248/sensor/aaaaa/datapoints HTTP/1.1\r\n"
    "Host: api.yeelink.net\r\n"
    "Accept: */*\r\n"
    "U-ApiKey: b97ac84fe6527bde9ecc20f251552faa\r\n"
    "Content-Length: dt\r\n"
    "Content-Type: application/x-www-form-urlencoded\r\n"
    "Connection: close\r\n"
    "\r\n"
    "{\"value\":xxxxxx}\r\n"
       };//xx用来填充数值
  
char temperature_sensor_id[]={"26079"};
char humidity_sensor_id[]={"26080"};
char press_sensor_id[]={"26081"};



/////1
void post_temperature() //发送温度数据
{  connect();
   len=strlen(post);
   for(times=0;times<len;times++) 
   {
      if(post[times]=='a'&&post[times+1]=='a'&&post[times+2]=='a')
       { 
          post[times]=temperature_sensor_id[0];
	  post[times+1]=temperature_sensor_id[1];
	  post[times+2]=temperature_sensor_id[2];
	  post[times+3]=temperature_sensor_id[3];
	  post[times+4]=temperature_sensor_id[4];
          break;        
       }
   }
   temp=0;
   len=strlen(post);   
   temp=Serial3.print(temperature,1);  
    for(times=0;times<len;times++)
   {
       if(post[times]=='d'&&post[times+1]=='t')
	   {
              post[times]=(temp+10)/10+0x30;  
	      post[times+1]=(temp+10)%10+0x30;
	      break;
	   }
   }
   
   for(times=0;times<len;times++)//填改传感器数值，发送报文
     {
       if(post[times]=='x'&&post[times+1]=='x'&&post[times+2]=='x') 
	   {
              Serial2.print(temperature,1);                 
              times=times+6;
	    } 
        Serial2.print(post[times]);
     } 
    Serial2.write(26);//send order
    delay(5000);
    //close();
   for(times=0;times<len;times++)
  {
     post[times]=post_reserve[times];
  }       
}
////////2
void post_humidity() //
{  connect();
   len=strlen(post);
   for(times=0;times<len;times++) 
   {
      if(post[times]=='a'&&post[times+1]=='a'&&post[times+2]=='a')
       { 
          post[times]=humidity_sensor_id[0];
	  post[times+1]=humidity_sensor_id[1];
	  post[times+2]=humidity_sensor_id[2];
	  post[times+3]=humidity_sensor_id[3];
	  post[times+4]=humidity_sensor_id[4];
          break;        
       }
   }
   temp=0;
   len=strlen(post);   
   temp=Serial3.print(humidity);  
    for(times=0;times<len;times++)
   {
       if(post[times]=='d'&&post[times+1]=='t')
	   {
              post[times]=(temp+10)/10+0x30;  
	      post[times+1]=(temp+10)%10+0x30;
	      break;
	   }
   }
   
   for(times=0;times<len;times++)//填改传感器数值，发送报文
     {
       if(post[times]=='x'&&post[times+1]=='x'&&post[times+2]=='x') 
	   {
              Serial2.print(humidity);                 
              times=times+6;
	    } 
        Serial2.print(post[times]);
     } 
    Serial2.write(26);//send order
    delay(5000);
    //close();
   for(times=0;times<len;times++)
  {
     post[times]=post_reserve[times];
  }       
}


//////

void post_press() //发送压力数据
{  connect();
   len=strlen(post);
   for(times=0;times<len;times++) 
   {
      if(post[times]=='a'&&post[times+1]=='a'&&post[times+2]=='a')
       { 
      post[times]=press_sensor_id[0];
	  post[times+1]=press_sensor_id[1];
	  post[times+2]=press_sensor_id[2];
	  post[times+3]=press_sensor_id[3];
	  post[times+4]=press_sensor_id[4];
          break;        
       }
   }
   temp=0;
   len=strlen(post);   
   temp=Serial3.print(pressure,1);  
    for(times=0;times<len;times++)
   {
       if(post[times]=='d'&&post[times+1]=='t')
	   {
              post[times]=(temp+10)/10+0x30;  
	      post[times+1]=(temp+10)%10+0x30;
	      break;
	   }
   }
   
   for(times=0;times<len;times++)//填改传感器数值，发送报文
     {
       if(post[times]=='x'&&post[times+1]=='x'&&post[times+2]=='x') 
	   {
              Serial2.print(pressure,1);                 
              times=times+6;
	    } 
        Serial2.print(post[times]);
     } 
    Serial2.write(26);//send order
    delay(5000);
    //close();
   for(times=0;times<len;times++)
  {
     post[times]=post_reserve[times];
  }       
}



 void connect()//TCP连接
 {
  int i;
  Serial2.print("ati\r\n"); 
  delay(1000);
  Serial2.print("ati\r\n"); 
  delay(1000);
  Serial2.print("ati\r\n"); 
  delay(1000);
  delay(500); 
  Serial2.print("AT+CGCLASS=\"B\"\r\n"); 
  delay(500); 
  Serial2.print("AT+CGDCONT=1,\"IP\",\"UNINET\"\r\n"); 
  delay(500);
  Serial2.print("AT+CGATT=1\r\n"); 
  delay(500); 
  Serial2.print("AT+CIPCSGP=1,\"UNINET\"\r\n"); //uninet
  delay(500);  
  Serial2.print("AT+CLPORT=\"TCP\",\"2000\"\r\n"); 
  delay(500);  
  Serial2.print("AT+CIPSTART=\"TCP\",\"42.96.164.52\",\"80\"\r\n"); //the ip addr to yeelink
  delay(500);   
  for(i=0;i<=9;i++)
  {
  delay(1000); 
  }
  Serial2.print("AT+CIPSEND\r\n"); 
  delay(500);
 }
 
 void close()//结束TCP连接
 {
 
  Serial2.print("AT+CIPCLOSE=1\r\n"); 
  delay(500);
  Serial2.print("AT+CIPSHUT\r\n"); 
  delay(500);
 }








